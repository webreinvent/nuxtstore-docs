[{"data":1,"prerenderedAt":214},["ShallowReactive",2],{"navigation":3,"/mobile-app/thought-processses/state-management":57,"/mobile-app/thought-processses/state-management-surround":210},[4,13,50],{"title":5,"_path":6,"children":7},"Getting Started","/getting-started",[8,10],{"title":9,"_path":6},"Introduction",{"title":11,"_path":12},"Code of Conduct","/getting-started/code-of-conduct",{"title":14,"_path":15,"children":16},"Mobile App","/mobile-app",[17,25,39],{"title":18,"_path":19,"children":20},"Onboarding","/mobile-app/onboarding",[21,22],{"title":9,"_path":19},{"title":23,"_path":24},"Tech Stack","/mobile-app/onboarding/tech-stack",{"title":26,"_path":27,"children":28},"Thought Processes","/mobile-app/thought-processses",[29,30,33,36],{"title":9,"_path":27},{"title":31,"_path":32},"Architecture","/mobile-app/thought-processses/architecture",{"title":34,"_path":35},"Decoupling Dependencies","/mobile-app/thought-processses/decoupling",{"title":37,"_path":38},"State Management","/mobile-app/thought-processses/state-management",{"title":40,"_path":41,"children":42},"Proof of Concepts","/mobile-app/poc",[43,44,47],{"title":9,"_path":41},{"title":45,"_path":46},"Architecture PoC","/mobile-app/poc/architecture",{"title":48,"_path":49},"Automatic code generation","/mobile-app/poc/code-generation",{"title":51,"_path":52,"children":53},"Web","/web",[54],{"title":55,"_path":56},"Guide","/web/guide",{"_path":38,"_dir":58,"_draft":59,"_partial":59,"_locale":60,"title":37,"description":61,"body":62,"_type":204,"_id":205,"_source":206,"_file":207,"_stem":208,"_extension":209},"thought-processses",false,"","Managing State in the Project",{"type":63,"children":64,"toc":196},"root",[65,74,84,91,135,141],{"type":66,"tag":67,"props":68,"children":70},"element","h2",{"id":69},"bloc",[71],{"type":72,"value":73},"text","BLoC",{"type":66,"tag":75,"props":76,"children":77},"blockquote",{},[78],{"type":66,"tag":79,"props":80,"children":81},"p",{},[82],{"type":72,"value":83},"BLoC, short for Business Logic Component, enforces a unidirectional data flow, ensuring a clear separation of concerns and promoting testability.",{"type":66,"tag":85,"props":86,"children":88},"h3",{"id":87},"principles",[89],{"type":72,"value":90},"Principles",{"type":66,"tag":92,"props":93,"children":94},"ul",{},[95,109,122],{"type":66,"tag":96,"props":97,"children":98},"li",{},[99,101],{"type":72,"value":100},"Events Drive State Changes\n",{"type":66,"tag":92,"props":102,"children":103},{},[104],{"type":66,"tag":96,"props":105,"children":106},{},[107],{"type":72,"value":108},"BLoC receives events triggered by user interactions or other parts of the application. These events signal a potential change in the state.",{"type":66,"tag":96,"props":110,"children":111},{},[112,114],{"type":72,"value":113},"State Updates via Emitting New States\n",{"type":66,"tag":92,"props":115,"children":116},{},[117],{"type":66,"tag":96,"props":118,"children":119},{},[120],{"type":72,"value":121},"Based on the received event, the BLoC processes it and emits a new state that reflects the updated application state.",{"type":66,"tag":96,"props":123,"children":124},{},[125,127],{"type":72,"value":126},"UI Reacts to State Changes\n",{"type":66,"tag":92,"props":128,"children":129},{},[130],{"type":66,"tag":96,"props":131,"children":132},{},[133],{"type":72,"value":134},"The UI observes the state emitted by the BLoC and rebuilds itself accordingly, ensuring the UI always reflects the current state.",{"type":66,"tag":85,"props":136,"children":138},{"id":137},"pros",[139],{"type":72,"value":140},"Pros",{"type":66,"tag":92,"props":142,"children":143},{},[144,157,170,183],{"type":66,"tag":96,"props":145,"children":146},{},[147,149],{"type":72,"value":148},"Predictable State Flow\n",{"type":66,"tag":92,"props":150,"children":151},{},[152],{"type":66,"tag":96,"props":153,"children":154},{},[155],{"type":72,"value":156},"BLoC enforces a unidirectional data flow, making it easier to reason about how state changes occur within your application.",{"type":66,"tag":96,"props":158,"children":159},{},[160,162],{"type":72,"value":161},"Separation of Concerns\n",{"type":66,"tag":92,"props":163,"children":164},{},[165],{"type":66,"tag":96,"props":166,"children":167},{},[168],{"type":72,"value":169},"BLoC separates the UI from the business logic, leading to cleaner and more maintainable code.",{"type":66,"tag":96,"props":171,"children":172},{},[173,175],{"type":72,"value":174},"Scalability\n",{"type":66,"tag":92,"props":176,"children":177},{},[178],{"type":66,"tag":96,"props":179,"children":180},{},[181],{"type":72,"value":182},"The BLoC pattern scales well for complex applications with intricate state management requirements.",{"type":66,"tag":96,"props":184,"children":185},{},[186,188],{"type":72,"value":187},"Improved Testability\n",{"type":66,"tag":92,"props":189,"children":190},{},[191],{"type":66,"tag":96,"props":192,"children":193},{},[194],{"type":72,"value":195},"By isolating state logic within the BLoC, you can write unit tests to ensure the BLoC reacts correctly to different events.",{"title":60,"searchDepth":197,"depth":197,"links":198},2,[199],{"id":69,"depth":197,"text":73,"children":200},[201,203],{"id":87,"depth":202,"text":90},3,{"id":137,"depth":202,"text":140},"markdown","content:2.mobile-app:2.thought-processses:4.state-management.md","content","2.mobile-app/2.thought-processses/4.state-management.md","2.mobile-app/2.thought-processses/4.state-management","md",[211,213],{"_path":35,"title":34,"description":212},null,{"_path":41,"title":9,"description":40},1741783693832]