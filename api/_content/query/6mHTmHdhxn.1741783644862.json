{"_path":"/mobile-app/thought-processses/architecture","_dir":"thought-processses","_draft":false,"_partial":false,"_locale":"","title":"Architecture","description":"All about project architecture","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"what-will-we-discuss-about"},"children":[{"type":"text","value":"What will we discuss about?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There are so many architectures but two of them needs some discussion here."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Model-View-Controller"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Clean Architecture"}]}]},{"type":"element","tag":"h2","props":{"id":"what-we-want-to-avoid-intentionally-for-now"},"children":[{"type":"text","value":"What we want to avoid intentionally for now?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"MVVM\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"MVVM implies databindings between the view and the viewmodel, which means, in practice, the view objects mostly are the ones commanding the viewmodel. MVVM seems to me a simplification of MVC, to show the model \"as is\" behind the scenes. And because we are already talking about MVC, talking MVVM doesn't makes sense."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Also I think, overuse of data binding can lead to tight coupling between the View and ViewModel, making the code less modular and harder to test."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Layered Architecture\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Layered Architecture has unidirectional dependencies, with lower layers depending on higher ones. While Clean Architecture Dependencies point inwards towards the core, making the core independent of external factors. So I am gonna exclude Layered Architecture & will focus on Clean Architecture. Also Clean Architecture offers high degree of flexibility, testability, and maintainability on top of what Layered Architecture does."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Hexagonal Architecture\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If one use-case (application-service) is dependent on another, and so on, resulting in a tangled chain of calls where people usually get lost. Usually, this web of dependencies is an anti-pattern that hinders the clarity and simplicity that Hexagonal Architecture aims to provide."}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"model-view-controller"},"children":[{"type":"text","value":"Model-View-Controller"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MVC separates an application into three interconnected parts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Model\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Represents the data of the application."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"View\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Responsible for the user interface"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Controller\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handles the logic between the Model and the View."}]}]}]}]},{"type":"element","tag":"pre","props":{"code":"./lib\n├── models\n│   ├── data\n│   └── ...\n├── Views\n│   └── ...\n├── Controllers\n│   └── ...\n├── Services\n│   └── ...\n├── Repositories\n│   └── ...\n└── routes\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./lib\n├── models\n│   ├── data\n│   └── ...\n├── Views\n│   └── ...\n├── Controllers\n│   └── ...\n├── Services\n│   └── ...\n├── Repositories\n│   └── ...\n└── routes\n"}]}]},{"type":"element","tag":"h3","props":{"id":"pros"},"children":[{"type":"text","value":"Pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Simplicity"}]},{"type":"text","value":": Easier to implement for small applications."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Quick to start"}]},{"type":"text","value":": Suitable for smaller projects or MVP applications."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Familiarity"}]},{"type":"text","value":": A widely recognized pattern, making it easier to onboard new developers."}]}]},{"type":"element","tag":"h3","props":{"id":"cons"},"children":[{"type":"text","value":"Cons"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Tight Coupling"}]},{"type":"text","value":": The controller is responsible for both business logic and UI updates, leading to a tight coupling between the components."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Scalability Issues"}]},{"type":"text","value":": As the application grows, managing complexity can become difficult because the logic might get mixed in the controller."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Limited Separation of Concerns"}]},{"type":"text","value":": This pattern often doesn't separate responsibilities as clearly, leading to potential maintenance challenges in large apps."}]}]},{"type":"element","tag":"h2","props":{"id":"clean-architecture"},"children":[{"type":"text","value":"Clean Architecture"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Data Layer\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Models"}]},{"type":"text","value":": Define the data structures for your application, keeping them simple and focused on the data they represent."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Services"}]},{"type":"text","value":": Implement services for network requests, local storage, and other data operations. Use appropriate libraries to handle these tasks."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Domain Layer\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Interfaces"}]},{"type":"text","value":": Define clear interfaces for repositories, specifying the methods to interact with data."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Repositories"}]},{"type":"text","value":": Implement these interfaces, using the data layer to fetch and store data. Keep the repository logic independent of the data source (e.g., network, database)."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Presentation Layer\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pages"}]},{"type":"text","value":": Build the UI screens, using widgets to compose the layout and handle user interactions."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Widgets"}]},{"type":"text","value":": Create reusable UI components to improve code organization and maintainability."}]}]}]}]},{"type":"element","tag":"pre","props":{"code":"./lib\n├── data\n│   ├── models\n│   └── services\n├── domain\n│   ├── interfaces\n│   └── repositories\n├── presentation\n│   ├── pages\n│   └── widgets\n└── routes\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"./lib\n├── data\n│   ├── models\n│   └── services\n├── domain\n│   ├── interfaces\n│   └── repositories\n├── presentation\n│   ├── pages\n│   └── widgets\n└── routes\n"}]}]},{"type":"element","tag":"h3","props":{"id":"pros-1"},"children":[{"type":"text","value":"Pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Separation of Concerns"}]},{"type":"text","value":": Clean Architecture separates concerns into distinct layers, making it easier to maintain and scale as the app grows."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Flexibility"}]},{"type":"text","value":": The architecture can easily accommodate changes in UI frameworks, data sources, or external dependencies without affecting the core business logic."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Scalability"}]},{"type":"text","value":": Clean Architecture is designed to handle complexity and larger applications efficiently."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Testability"}]},{"type":"text","value":": Since the business logic and UI are decoupled, it’s easier to test different parts of the app independently."}]}]},{"type":"element","tag":"h3","props":{"id":"cons-1"},"children":[{"type":"text","value":"Cons"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Complexity"}]},{"type":"text","value":": The setup is more complex compared to MVC, and might be overkill for simple apps."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Learning Curve"}]},{"type":"text","value":": For beginners or developers new to the architecture, there might be an initial learning curve to understand the separation of layers and their interactions."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Verbose Code"}]},{"type":"text","value":": Because of the multiple layers and classes involved, it can lead to more boilerplate code."}]}]},{"type":"element","tag":"h2","props":{"id":"decision-making"},"children":[{"type":"text","value":"Decision Making"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For production-grade apps, Clean Architecture is often preferred. Where rapid development is key, and you can afford some level of coupling between logic and UI - you should use MVC. Clean Architecture is better suited for larger, more complex apps that need to scale, be maintainable over time, and where testability and decoupling of concerns are priorities."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We have decided to go ahead with Clean Architecture."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-will-we-discuss-about","depth":2,"text":"What will we discuss about?"},{"id":"what-we-want-to-avoid-intentionally-for-now","depth":2,"text":"What we want to avoid intentionally for now?"},{"id":"model-view-controller","depth":2,"text":"Model-View-Controller","children":[{"id":"pros","depth":3,"text":"Pros"},{"id":"cons","depth":3,"text":"Cons"}]},{"id":"clean-architecture","depth":2,"text":"Clean Architecture","children":[{"id":"pros-1","depth":3,"text":"Pros"},{"id":"cons-1","depth":3,"text":"Cons"}]},{"id":"decision-making","depth":2,"text":"Decision Making"}]}},"_type":"markdown","_id":"content:2.mobile-app:2.thought-processses:2.architecture.md","_source":"content","_file":"2.mobile-app/2.thought-processses/2.architecture.md","_stem":"2.mobile-app/2.thought-processses/2.architecture","_extension":"md"}