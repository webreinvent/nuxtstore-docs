{"_path":"/mobile-app/thought-processses/decoupling","_dir":"thought-processses","_draft":false,"_partial":false,"_locale":"","title":"Decoupling Dependencies","description":null,"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tightly coupled dependencies between components can lead to several issues like Increased complexity, Reduced testability, Reduced maintainability, etc."}]},{"type":"element","tag":"h2","props":{"id":"proposed-solutions"},"children":[{"type":"text","value":"Proposed Solutions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To address these challenges, we propose two effective strategies: Singleton And Context-Aware Dependency Retrieval"}]},{"type":"element","tag":"h2","props":{"id":"singleton"},"children":[{"type":"text","value":"Singleton"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this approach, a singleton acts as a centralized container for all repository and service instances."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a Singleton\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Design a singleton class to hold all repository and service instances."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Initialize the singleton asynchronously during the app's startup phase, typically during the splash screen."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Access the Singleton\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Once the singleton is initialized, it can be accessed from anywhere in the app."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"However, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"limit its usage"}]},{"type":"text","value":" to passing necessary instances to Blocs, Controllers, or Providers during their injection."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Avoid excessive use"}]},{"type":"text","value":" of the singleton to prevent tight coupling and global state management."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Selective Instance Passing\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When injecting dependencies into a Bloc, Controller, or Provider, pass only the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"specific instances"}]},{"type":"text","value":" required for its functionality. This approach promotes a more granular and focused dependency injection process."}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"pros"},"children":[{"type":"text","value":"Pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Centralized initialization of dependencies."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Clear separation of the initialization phase and dependency usage phase."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ensures that dependencies are only instantiated once, avoiding redundant resource usage."}]}]},{"type":"element","tag":"h3","props":{"id":"cons"},"children":[{"type":"text","value":"Cons"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The app relies on all dependencies being initialized upfront, which may increase the splash screen loading time."}]}]},{"type":"element","tag":"h2","props":{"id":"context-aware-dependency-retrieval"},"children":[{"type":"text","value":"Context-Aware Dependency Retrieval"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This approach introduces a core Bloc, Controller, or Provider, referred to as the \"core instance,\" to store all repository and service instances. Dependencies are accessed dynamically using the BuildContext to locate the core instance. This approach emphasizes context-aware dependency resolution and reduces the reliance on global access patterns."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a Core Instance\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Define a Bloc, Controller, or Provider to act as the central storage for dependencies."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Inject Dependencies\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Initialize all required repository and service instances within the core instance."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Provide the core instance to the widget tree using a dependency injection mechanism."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Dynamic Retrieval\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use the BuildContext to locate the core instance dynamically whenever dependencies are needed."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Extract only the specific instances required for a given Bloc, Controller, or Provider."}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"pros-1"},"children":[{"type":"text","value":"Pros"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Context-aware dependency resolution promotes structured and localized access patterns."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Simplifies testing by mocking the core instance for specific widget trees."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Reduces global state access, aligning with best practices in state management."}]}]},{"type":"element","tag":"h3","props":{"id":"cons-1"},"children":[{"type":"text","value":"Cons"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Requires proper handling of BuildContext to avoid accessing dependencies outside of the widget tree."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Dependency retrieval via BuildContext can become verbose if not managed properly."}]}]},{"type":"element","tag":"h2","props":{"id":"decision-making"},"children":[{"type":"text","value":"Decision Making"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Going ahead with Singleton makes sense for the project we have"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"proposed-solutions","depth":2,"text":"Proposed Solutions"},{"id":"singleton","depth":2,"text":"Singleton","children":[{"id":"pros","depth":3,"text":"Pros"},{"id":"cons","depth":3,"text":"Cons"}]},{"id":"context-aware-dependency-retrieval","depth":2,"text":"Context-Aware Dependency Retrieval","children":[{"id":"pros-1","depth":3,"text":"Pros"},{"id":"cons-1","depth":3,"text":"Cons"}]},{"id":"decision-making","depth":2,"text":"Decision Making"}]}},"_type":"markdown","_id":"content:2.mobile-app:2.thought-processses:3.decoupling.md","_source":"content","_file":"2.mobile-app/2.thought-processses/3.decoupling.md","_stem":"2.mobile-app/2.thought-processses/3.decoupling","_extension":"md"}